/**
 * this script handles filter interactions between tableau and the webpage to demonstrate the two way communication capabilities enabled by the tableau js api.
 * @see https://help.tableau.com/current/api/js_api/en-us/JavaScriptAPI/js_api_ref.htm  for more infos about the js api.
 * @author Loic Yondjeu 
 */

// global variable as reference to currently loaded viz
var viz;

/**
 * init a sample dashboard from my tableau dev site
 */
function initViz() {
    var containerDiv = document.getElementById("vizContainer"),
        // define url to a Overview view from the Superstore workbook on my tableau dev site
        url = "https://10ax.online.tableau.com/t/loicplaygrounddev353480/views/Superstore/Overview?:showAppBanner=false&:display_count=n&:showVizHome=n";
        options = {
            hideTabs: true,
            onFirstInteractive: function () {
                var worksheets = getWorksheets(viz);
                // process all filters used on the dashboard initially and subscribe to any filtering event comming out of the dashboard to recompute the filters on the webpage.
                processFilters(worksheets);
                viz.addEventListener('filterchange', (filterEvent) => {
                    var worksheets = getWorksheets(filterEvent.getViz());
                    processFilters(worksheets);
                });
                viz.addEventListener(tableau.TableauEventName.MARKS_SELECTION, (marksEvent) => {
                    var worksheets = getWorksheets(marksEvent.getViz());
                    processFilters(worksheets);
                });
            }
        };

    viz = new tableau.Viz(containerDiv, url, options);
}

/**
 * 1- fetches all filter objects from all worksheets on the dashboard (could be one, could be many of them).
 * 2- then flatten the array of filters per worksheet into on single array of filters objects.
 * 3- remove any duplicates from the flattened array of filters since a same filter can be used in many worksheet (if there is more than one) at the same time. 
 * 4- call a function to display those filter with their names and values on the webpage.
 */
function processFilters(worksheets) {
    getFilters(worksheets).then(allFilters => {
        filters = allFilters.flat();
        filters = removeDuplicates(filters);
        displayFilterValues(filters);
    });
}

/** extract all filters from the viz object */
function getWorksheets(viz) {
    return viz.getWorkbook().getActiveSheet().getWorksheets();
}

/**
 * concat all promises generated by all getFilterAsync calls from all worksheets in the viz.
 * the goal is to basically wait for all filters to get loaded before processing them for display.
 * since there calls are all asynchronous
 */
function getFilters(worksheets) {
    var allfiltersPromises = [];
    worksheets.forEach(worksheet => {
        var filterPromise = worksheet.getFiltersAsync(); 
        allfiltersPromises.push(filterPromise);
    });
    return Promise.all(allfiltersPromises);
}

/** display filters by name and applied values in the ui of the webpage by generating html for each filter */
function displayFilterValues(filters) {
    var filterContainerElement = document.getElementById("filterTableBody");
    var innerHtml = "" ;
    filters.forEach(filter => {
        if (filter.$type === "categorical") {
            var appliedValues = "";
            filter.$appliedValues.forEach(value => {
                appliedValues += `<span class="badge badge-primary"> ${value.formattedValue} </span> \n`;
            });
            innerHtml += `
                <tr>
                    <th> ${filter.$caption} </th>
                    <td> ${appliedValues} <td>
                </tr> \n`; 
        }
    });
    filterContainerElement.innerHTML = innerHtml;
}

/** remove any duplicates from the flattened array of filters since a same filter can be used in many worksheet (if there is more than one) at the same time.  */
function removeDuplicates(filters) {
    uniquefilters = filters.filter((filter, pos) => {
        return filters.findIndex(item => item.$caption === filter.$caption) == pos;
    });
    return [...uniquefilters];
}

/** clear any filter on the viz using the clear filter method. PS i think there is maybe a better to do this */
function clearFilters() {
    if (viz) {
       var worksheets =  viz.getWorkbook().getActiveSheet().getWorksheets();
       worksheets.forEach(worksheet => {
           worksheet.getFiltersAsync().then(filters => {
               filters.forEach(filter => {
                   worksheet.clearFilterAsync(filter.$caption);
               })
           })
       });
    }
}